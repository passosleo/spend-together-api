// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId               String               @id @default(uuid())
  email                String               @unique
  emailVerified        Boolean              @default(false)
  name                 String?
  username             String               @unique
  password             String
  avatar               String?
  receiveEmails        Boolean              @default(true)
  isPublic             Boolean              @default(true)
  isEnabled            Boolean              @default(true)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  spendControls        SpendControlUsers[]
  spends               Spend[]
  notifications        Notification[]
  spendControlsInvited SpendControlInvite[] @relation("ownerUser")
  spendControlsInvites SpendControlInvite[] @relation("invitedUser")
}

model SpendControl {
  spendControlId      String               @id @default(uuid())
  name                String
  description         String?
  color               String?
  isEnabled           Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  users               SpendControlUsers[]
  spends              Spend[]
  spendControlInvites SpendControlInvite[]
}

model SpendControlUsers {
  spendControlId String
  userId         String
  isOwner        Boolean      @default(false)
  invitedAt      DateTime     @default(now())
  joinedAt       DateTime?
  isEnabled      Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  spendControl   SpendControl @relation(fields: [spendControlId], references: [spendControlId])
  user           User         @relation(fields: [userId], references: [userId])

  @@id([spendControlId, userId])
}

model Spend {
  spendId         String        @id @default(uuid())
  spendControlId  String
  spendCategoryId String
  userId          String
  description     String?
  amount          Float
  isEnabled       Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  spendControl    SpendControl  @relation(fields: [spendControlId], references: [spendControlId])
  spendCategory   SpendCategory @relation(fields: [spendCategoryId], references: [spendCategoryId])
  user            User          @relation(fields: [userId], references: [userId])
}

model SpendCategory {
  spendCategoryId String   @id @default(uuid())
  name            String
  description     String?
  color           String
  isEnabled       Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  spends          Spend[]
}

model PrivacyPolicy {
  privacyPolicyId String   @id @default(uuid())
  version         String
  content         String
  isEnabled       Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Notification {
  notificationId String   @id @default(uuid())
  userId         String
  title          String
  content        String
  link           String?
  isRead         Boolean  @default(false)
  isEnabled      Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [userId])
}

model SpendControlInvite {
  spendControlInviteId String       @id @default(uuid())
  spendControlId       String
  ownerUserId          String
  invitedUserId        String
  isAccepted           Boolean      @default(false)
  isEnabled            Boolean      @default(true)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  spendControl         SpendControl @relation(fields: [spendControlId], references: [spendControlId])
  ownerUser            User         @relation(fields: [ownerUserId], references: [userId], name: "ownerUser")
  invitedUser          User         @relation(fields: [invitedUserId], references: [userId], name: "invitedUser")
}
